---
description: 
globs: 
alwaysApply: false
---
# Turborepo 모노레포 셋업 가이드

### 프로젝트 개요
3개의 프로젝트를 하나의 모노레포로 관리하기 위한 Turborepo 셋업 가이드입니다.

### 프로젝트 구성

Production (Next.js): 메인 프로덕션 서비스
Admin BO (React): 백오피스 어드민
Admin PO (React): 파트너 오피스 어드민

### 프로젝트 구조
apps/
├── packages/          # 공통 패키지들
│   ├── shared/       # 공통 hooks, utils
│   ├── ui/           # 공통 컴포넌트
│   ├── admin-ui/     # 어드민 전용 컴포넌트
│   ├── design-tokens/ # Tailwind CSS, 디자인 토큰
│   ├── eslint-config/ # 공통 ESLint 설정
│   └── prettier-config/ # 공통 Prettier 설정
├── production/        # Next.js 메인 서비스
├── admin-bo/         # 백오피스 어드민 (React)
└── admin-po/         # 파트너 오피스 어드민 (React)
```

### 기술 스택
- **모노레포 도구**: Turborepo
- **패키지 매니저**: PNPM (workspace 기능 활용)
- **빌드 도구**: Turbo + Vite/Next.js
- **CI/CD**: GitHub Actions (또는 선택한 CI 도구)
- **코드 품질**: ESLint + Prettier (공통 설정)

### 주요 요구사항

공통 코드 관리: hooks, utils 등을 3개 프로젝트에서 공유
어드민 전용 컴포넌트: BO/PO에서만 사용하는 컴포넌트 분리
디자인 토큰 공유: Tailwind CSS 설정을 모든 프로젝트에서 공유
개발 환경 통일: ESLint, Prettier 설정 공유 및 프로젝트별 커스터마이징
선택적 실행: 서버 코드 제외하고 프론트엔드만 실행 가능
개발 셋팅: /server 폴더를 제외하고 /apps폴더에서만 독립적으로 실행할 수 있도록 셋팅

### 설정의 장점

#### 1. **유연한 확장성**
- 공통 설정을 베이스로 하고 각 프로젝트별 커스터마이징 가능
- Next.js와 React 환경 모두 지원

#### 2. **일관된 코드 스타일**
- 모든 프로젝트에서 동일한 기본 룰 적용
- 팀 전체의 코드 품질 향상

#### 3. **유지보수 효율성**
- 공통 설정 변경 시 모든 프로젝트에 자동 반영
- 중복 설정 제거

#### 4. **프로젝트별 특화**
- Next.js는 Next.js 전용 룰 추가
- 어드민 앱은 더 관대한 console 룰 등

## ESLint & Prettier 공통 설정

#### 1. 공통 ESLint 설정 패키지

```json
// packages/eslint-config/package.json
{
  "name": "@monorepo/eslint-config",
  "version": "1.0.0",
  "main": "index.js",
  "dependencies": {
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint-plugin-react": "^7.33.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-import": "^2.28.0",
    "eslint-plugin-jsx-a11y": "^6.7.0",
    "@next/eslint-plugin-next": "^13.0.0"
  }
}
```

```javascript
// packages/eslint-config/index.js
module.exports = {
  extends: [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:import/recommended",
    "plugin:jsx-a11y/recommended"
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module",
    ecmaFeatures: {
      jsx: true
    }
  },
  plugins: ["@typescript-eslint", "react", "react-hooks", "import", "jsx-a11y"],
  rules: {
    // 공통 룰들
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "import/order": ["error", {
      "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
      "newlines-between": "always"
    }]
  },
  settings: {
    react: {
      version: "detect"
    },
    "import/resolver": {
      typescript: {}
    }
  }
}
```

```javascript
// packages/eslint-config/nextjs.js (Next.js 전용 설정)
module.exports = {
  extends: [
    "./index.js",
    "plugin:@next/next/recommended"
  ],
  rules: {
    // Next.js 특화 룰들
    "@next/next/no-img-element": "error",
    "@next/next/no-html-link-for-pages": "error"
  }
}
```

#### 2. 공통 Prettier 설정 패키지

```json
// packages/prettier-config/package.json
{
  "name": "@monorepo/prettier-config",
  "version": "1.0.0",
  "main": "index.js"
}
```

```javascript
// packages/prettier-config/index.js
module.exports = {
  semi: true,
  trailingComma: "es5",
  singleQuote: true,
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  bracketSpacing: true,
  arrowParens: "avoid",
  endOfLine: "lf",
  plugins: ["prettier-plugin-tailwindcss"] // Tailwind CSS 클래스 정렬
}
```

#### 3. 각 프로젝트별 설정

```json
// production/.eslintrc.json (Next.js)
{
  "extends": ["@monorepo/eslint-config/nextjs"],
  "rules": {
    // 프로덕션 앱 전용 추가 룰
    "no-console": "warn"
  }
}
```

```json
// admin-bo/.eslintrc.json (React)
{
  "extends": ["@monorepo/eslint-config"],
  "rules": {
    // 어드민 앱 전용 추가 룰
    "no-console": "off",
    "react/display-name": "off"
  }
}
```

#### 4. 루트 package.json 스크립트

```json
// apps/package.json
{
  "scripts": {
    "dev": "turbo run dev",
    "build": "turbo run build",
    "lint": "turbo run lint",
    "lint:fix": "turbo run lint:fix",
    "format": "turbo run format",
    "type-check": "turbo run type-check"
  }
}
```

#### 5. 각 프로젝트별 스크립트

```json
// production/package.json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "format": "prettier --write .",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "@monorepo/eslint-config": "workspace:*",
    "@monorepo/prettier-config": "workspace:*"
  }
}
```

```json
// admin-bo/package.json & admin-po/package.json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "format": "prettier --write .",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "@monorepo/eslint-config": "workspace:*",
    "@monorepo/prettier-config": "workspace:*"
  }
}
```

### CI/CD 파이프라인 설정

#### 1. 빌드 최적화 전략
```yaml
# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint all projects
        run: pnpm turbo lint

      - name: Type check all projects
        run: pnpm turbo type-check

      - name: Build packages
        run: pnpm turbo build --filter=packages/*

      - name: Build apps
        run: pnpm turbo build --filter=production --filter=admin-bo --filter=admin-po
```

#### 2. 변경사항 감지 및 선택적 빌드
```yaml
      - name: Build only changed apps
        run: |
          pnpm turbo build --filter="...[origin/main]"
          pnpm turbo test --filter="...[origin/main]"
```

#### 3. Turborepo 캐시 설정
```json
// turbo.json
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**", "build/**"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "lint": {
      "outputs": []
    },
    "lint:fix": {
      "cache": false
    },
    "format": {
      "cache": false
    },
    "type-check": {
      "outputs": []
    },
    "test": {
      "outputs": ["coverage/**"]
    }
  }
}
```

#### 4. 원격 캐시 설정 (선택사항)
```bash
# Vercel Remote Cache 사용 시
pnpm turbo build --token=$TURBO_TOKEN --team=$TURBO_TEAM
```

### 배포 전략

#### 1. 프로덕션 배포
- Production 앱: Vercel/Netlify 자동 배포
- 변경사항 감지 시에만 배포 실행

#### 2. 어드민 배포
- Admin BO/PO: 별도 배포 환경
- 동시 배포 또는 개별 배포 선택 가능

#### 3. 스테이징 환경
```yaml
# 스테이징 배포 예시
      - name: Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: |
          pnpm turbo build --filter=production
          # 스테이징 배포 스크립트
```

### 개발 환경 명령어

```bash
# 전체 개발 서버 실행
pnpm dev

# 특정 앱만 실행
pnpm --filter production dev
pnpm --filter admin-bo dev

# 빌드
pnpm build

# 린트 & 포맷팅
pnpm lint
pnpm lint:fix
pnpm format

# 타입 체크
pnpm type-check

# 테스트
pnpm test

# 의존성 설치
pnpm install

# 패키지 추가 (특정 앱에)
pnpm --filter production add react-query
```

### 성능 최적화

#### 1. 빌드 캐시 활용
- Turborepo 로컬 캐시 자동 활용
- CI에서 원격 캐시 사용으로 빌드 시간 단축

#### 2. 병렬 빌드
- 독립적인 패키지들은 병렬로 빌드
- 의존성이 있는 패키지는 순차적으로 빌드

#### 3. 선택적 빌드
- 변경된 패키지만 빌드하여 CI 시간 단축
- Git 기반 변경사항 감지



### Turborepo와 빌드 도구 호환성

#### 빌드 도구에 관계없이 모든 이점 제공

Turborepo는 **오케스트레이터** 역할을 하므로, 각 프로젝트가 어떤 빌드 도구를 사용하든 상관없이 모든 이점을 제공합니다.

```json
// production/package.json (Next.js)
{
  "scripts": {
    "dev": "next dev",        // Next.js 사용
    "build": "next build"
  }
}

// admin-bo/package.json (Vite)  
{
  "scripts": {
    "dev": "vite",           // Vite 사용
    "build": "vite build"
  }
}
```

#### Turborepo 이점들 (빌드 도구 무관)

1. **캐싱**: Vite 빌드 결과도 완벽 캐시
2. **병렬 실행**: Next.js와 Vite 동시 실행
3. **의존성 순서**: packages → apps 순서 보장
4. **선택적 빌드**: 변경된 프로젝트만 빌드
5. **성능 최적화**: 모든 도구에서 동일한 최적화
